def solution(n):
    # n = 1 -> answer = 1 [(1)]
    # n = 2 -> answer = 2 [(1, 1), (2)]
    # n = 3 -> answer = 3 [(1, 1, 1), (2, 1), (1, 2)]
    # n = 4 -> answer = 5 [(1, 1, 1, 1), (1, 2, 1), (2, 1, 1), (1, 1, 2), (2, 2)]
    # n = 5 -> answer = 8 [(1, 1, 1, 1, 1), (1, 1, 1, 2), (1, 1, 2, 1), (1, 2, 1, 1), (2, 1, 1, 1), (1, 2, 2), (2, 1, 2), (2, 2, 1)]
    # Fibonacci
    
    num_list = [1 for _ in range(60001)]
    for i in range(2, n+1):
        # num_list[i] = num_list[i-2] + num_list[i-1]
        num_list[i] = (num_list[i-2] + num_list[i-1]) % 1000000007 
        # 숫자가 너무 커진다고 시간초과 난다는 다른 사람들의 의견
        # 억지..        
    # answer = (num_list[n] % 1000000007)
    answer = num_list[n]
    
    
    return answer

# 처음 결과
'''
정확성  테스트
테스트 1 〉	통과 (4.74ms, 11.8MB)
테스트 2 〉	통과 (2.22ms, 9.89MB)
테스트 3 〉	통과 (3.57ms, 10.8MB)
테스트 4 〉	통과 (6.89ms, 13.1MB)
테스트 5 〉	통과 (2.04ms, 9.87MB)
테스트 6 〉	통과 (5.56ms, 12.3MB)
테스트 7 〉	통과 (2.16ms, 9.88MB)
테스트 8 〉	통과 (4.07ms, 11.4MB)
테스트 9 〉	통과 (4.19ms, 11.2MB)
테스트 10 〉	통과 (7.40ms, 13.6MB)
테스트 11 〉	통과 (3.31ms, 10.5MB)
테스트 12 〉	통과 (2.23ms, 9.81MB)
테스트 13 〉	통과 (2.29ms, 9.87MB)
테스트 14 〉	통과 (3.43ms, 10.6MB)
효율성  테스트
테스트 1 〉	실패 (시간 초과)
테스트 2 〉	실패 (시간 초과)
테스트 3 〉	통과 (25.30ms, 28.4MB)
테스트 4 〉	통과 (17.19ms, 21.2MB)
테스트 5 〉	실패 (시간 초과)
테스트 6 〉	실패 (시간 초과)
채점 결과
정확성: 70.0
효율성: 10.0
합계: 80.0 / 100.0
'''


# 최종 결과
'''
정확성  테스트
테스트 1 〉	통과 (3.49ms, 9.79MB)
테스트 2 〉	통과 (2.40ms, 9.62MB)
테스트 3 〉	통과 (2.98ms, 9.86MB)
테스트 4 〉	통과 (3.96ms, 9.79MB)
테스트 5 〉	통과 (2.17ms, 9.51MB)
테스트 6 〉	통과 (3.79ms, 9.73MB)
테스트 7 〉	통과 (2.18ms, 9.48MB)
테스트 8 〉	통과 (3.11ms, 9.88MB)
테스트 9 〉	통과 (3.31ms, 9.87MB)
테스트 10 〉	통과 (4.10ms, 9.73MB)
테스트 11 〉	통과 (2.81ms, 9.78MB)
테스트 12 〉	통과 (2.15ms, 9.51MB)
테스트 13 〉	통과 (2.39ms, 9.62MB)
테스트 14 〉	통과 (2.77ms, 9.87MB)
효율성  테스트
테스트 1 〉	통과 (6.02ms, 10.2MB)
테스트 2 〉	통과 (8.35ms, 10.6MB)
테스트 3 〉	통과 (5.76ms, 10.3MB)
테스트 4 〉	통과 (5.29ms, 9.98MB)
테스트 5 〉	통과 (11.30ms, 10.8MB)
테스트 6 〉	통과 (12.79ms, 11.3MB)
채점 결과
정확성: 70.0
효율성: 30.0
합계: 100.0 / 100.0
'''