def solution(strs, t):
    # 처음 필요 단어개수 무한대로 초기화
    DP = [float('inf')] * len(t)
    # 집합이 리스트보다 빠름
    strs = set(strs)
    
    # 완성해야하는 문자열 길이 까지
    for i in range(len(t)):
        # 현재 위치부터 최대 5개 전 까지만
        for j in range(min(5, i+1),-1,-1):
            # 현재 위치부터 j 전 까지 글자가 존재한다면
            if t[i-j:i+1] in strs:
                # 처음부터 현재까지 글자가 있으면 하나의 단어 조각으로 만들어짐
                if i == j:
                    DP[i] = 1
                # 아니라면 현재까지 필요 조각 수와 처음부터 j위치까지 필요한 조각 + 1개 중 작은값으로 업데이트
                else:
                    DP[i] = min(DP[i], DP[i-j-1]+1)

    if DP[-1] == float('inf'):
        return -1 
    else:
        return DP[-1]


'''
정확성  테스트
테스트 1 〉    통과 (0.03ms, 9.13MB)
테스트 2 〉    통과 (0.06ms, 9.16MB)
테스트 3 〉    통과 (0.01ms, 9.29MB)
테스트 4 〉    통과 (0.19ms, 9.31MB)
테스트 5 〉    통과 (0.11ms, 9.3MB)
테스트 6 〉    통과 (0.02ms, 9.27MB)
테스트 7 〉    통과 (0.37ms, 9.21MB)
테스트 8 〉    통과 (2.45ms, 9.29MB)
테스트 9 〉    통과 (1.91ms, 9.25MB)
테스트 10 〉    통과 (3.24ms, 9.08MB)
테스트 11 〉    통과 (2.03ms, 9.28MB)
테스트 12 〉    통과 (0.02ms, 9.25MB)
테스트 13 〉    통과 (0.05ms, 9.23MB)
테스트 14 〉    통과 (0.03ms, 9.29MB)
테스트 15 〉    통과 (0.04ms, 9.25MB)
테스트 16 〉    통과 (0.03ms, 9.23MB)
테스트 17 〉    통과 (0.02ms, 9.28MB)
테스트 18 〉    통과 (0.02ms, 9.16MB)
테스트 19 〉    통과 (0.02ms, 9.38MB)
효율성  테스트
테스트 1 〉    통과 (37.76ms, 9.95MB)
테스트 2 〉    통과 (37.91ms, 9.86MB)
테스트 3 〉    통과 (37.57ms, 9.95MB)
테스트 4 〉    통과 (38.93ms, 9.95MB)
테스트 5 〉    통과 (36.56ms, 9.63MB)
'''
