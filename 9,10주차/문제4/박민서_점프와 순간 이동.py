# 거꾸로 생각
# 순간이동을 하고 난 총 이동거리는 항상 짝수가 됨
# 홀수일 때는 배터리를 쓴 게 됨
# 배터리 양을 최소로 써야하기 때문에 홀수가 되면 1만 뺌
def solution(n):
    ans = 0
    
    while n != 0:
        if n % 2 != 0: # 홀수면 배터리 소모해서 1 이동
            n -= 1
            ans += 1
        else:
            n //= 2 # 짝수면 절반만큼 뒤로 순간이동

    return ans

'''
정확성  테스트
테스트 1 〉	통과 (0.00ms, 9.09MB)
테스트 2 〉	통과 (0.00ms, 9.25MB)
테스트 3 〉	통과 (0.00ms, 9.26MB)
테스트 4 〉	통과 (0.00ms, 9.15MB)
테스트 5 〉	통과 (0.01ms, 9.2MB)
테스트 6 〉	통과 (0.00ms, 9.03MB)
테스트 7 〉	통과 (0.00ms, 9.12MB)
테스트 8 〉	통과 (0.00ms, 9.07MB)
테스트 9 〉	통과 (0.01ms, 9.26MB)
테스트 10 〉	통과 (0.00ms, 9.26MB)
테스트 11 〉	통과 (0.00ms, 9.27MB)
테스트 12 〉	통과 (0.01ms, 9.05MB)
테스트 13 〉	통과 (0.00ms, 9.13MB)
테스트 14 〉	통과 (0.00ms, 9.2MB)
테스트 15 〉	통과 (0.00ms, 9.23MB)
테스트 16 〉	통과 (0.01ms, 9.06MB)
테스트 17 〉	통과 (0.00ms, 9.24MB)
테스트 18 〉	통과 (0.00ms, 9.25MB)
효율성  테스트
테스트 1 〉	통과 (0.01ms, 8.91MB)
테스트 2 〉	통과 (0.01ms, 8.85MB)
테스트 3 〉	통과 (0.01ms, 9.18MB)
테스트 4 〉	통과 (0.01ms, 9.29MB)
테스트 5 〉	통과 (0.01ms, 9.17MB)
테스트 6 〉	통과 (0.01ms, 9.28MB)
테스트 7 〉	통과 (0.01ms, 9.17MB)
테스트 8 〉	통과 (0.00ms, 8.92MB)
테스트 9 〉	통과 (0.00ms, 8.98MB)
테스트 10 〉	통과 (0.01ms, 9MB)
채점 결과
정확성: 60.0
효율성: 40.0
합계: 100.0 / 100.0
'''