def solution(s):
    # 올바른 문자열 카운트
    answer = 0
    # 문자열 길이 만큼 반복
    for i in range(len(s)):
        # 문자열 회전
        s = s[1:] + s[:1]
        # 문자열 비교
        stack = []
        for j in s:
            # 첫번째 문자열 스택에 추가
            if len(stack) == 0:
                stack.append(j)
            # 들어온 문자열이랑 다음 문자열 비교 반복
            else:
                if j ==')' and stack[-1] == '(':
                    stack.pop()
                elif j ==']' and stack[-1] == '[':
                    stack.pop()
                elif j =='}' and stack[-1] == '{':
                    stack.pop()
                elif j == "(" or j == "[" or j == "{":
                    stack.append(j)
                else:
                    break
        if len(stack) == 0:
            answer += 1
    return answer




'''
A-> [A], {A}, (A)
[]-> ([])
A,B -> AB

}]()[{
]()[{}
()[{}]  +
)[{}](
[{}]()  +
{}]()[
}]()[{


[{}]()
1. 여는 괄호는 일단 추가한다
2. 닫는 괄호가 오면 제일 최근 문자열과 비교 해본다 동일하면 삭제
3. 이걸 반복
4. 문자열이 없으면 카운트 업



테스트 1 〉   통과 (13.27ms, 10.3MB)
테스트 2 〉   통과 (13.21ms, 10.2MB)
테스트 3 〉   통과 (15.77ms, 10.3MB)
테스트 4 〉   통과 (32.99ms, 10.3MB)
테스트 5 〉   통과 (84.69ms, 10.1MB)
테스트 6 〉   통과 (33.25ms, 10.2MB)
테스트 7 〉   통과 (46.73ms, 10.2MB)
테스트 8 〉   통과 (70.89ms, 10.2MB)
테스트 9 〉   통과 (127.05ms, 10.3MB)
테스트 10 〉   통과 (161.90ms, 10.1MB)
테스트 11 〉   통과 (226.53ms, 10.2MB)
테스트 12 〉   통과 (0.00ms, 10.1MB)
테스트 13 〉   통과 (0.01ms, 10MB)
테스트 14 〉   통과 (0.01ms, 10.2MB)





너무 어려웠음
인터넷 찾아보고 예시 코드들 이해도 안되었음
그래서 계속 읽음...

그러다 이해된 코드 따라해봤어요....

'''