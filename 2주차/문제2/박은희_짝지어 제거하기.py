def solution(s):
    answer = 0
    stack = []
    for i in range(len(s)):
        if len(stack) == 0:
            stack.append(s[i])
        elif stack[-1] == s[i]:
            stack.pop()
        else:
            stack.append(s[i])
            
    if len(stack) == 0:
        answer = 1
    return answer


'''
1. 처음 들어온 원소 스택에 추가
2. 스택의 제일 최근 원소가 지금 나오는 원소랑 같으면 pop 삭제
3. 삭제 시킬 수 있는 원소가 없는 경우 append로 스택에 추가
스택에 뭐가 남아있으면 0리턴
아무것도 없으면 1리턴




정확성  테스트
테스트 1 〉	통과 (0.00ms, 10.4MB)
테스트 2 〉	통과 (16.63ms, 10.3MB)
테스트 3 〉	통과 (19.25ms, 10.5MB)
테스트 4 〉	통과 (18.37ms, 10.6MB)
테스트 5 〉	통과 (18.02ms, 10.6MB)
테스트 6 〉	통과 (18.80ms, 10.6MB)
테스트 7 〉	통과 (19.24ms, 10.7MB)
테스트 8 〉	통과 (19.29ms, 10.7MB)
테스트 9 〉	통과 (0.00ms, 10.2MB)
테스트 10 〉	통과 (0.02ms, 10.2MB)
테스트 11 〉	통과 (0.01ms, 10.2MB)
테스트 12 〉	통과 (0.00ms, 10.2MB)
테스트 13 〉	통과 (0.00ms, 10.1MB)
테스트 14 〉	통과 (0.01ms, 10.2MB)
테스트 15 〉	통과 (0.00ms, 10.2MB)
테스트 16 〉	통과 (0.01ms, 10.3MB)
테스트 17 〉	통과 (0.01ms, 10.2MB)
테스트 18 〉	통과 (0.01ms, 10MB)
효율성  테스트
테스트 1 〉	통과 (180.31ms, 16.3MB)
테스트 2 〉	통과 (153.16ms, 11.9MB)
테스트 3 〉	통과 (171.15ms, 12.2MB)
테스트 4 〉	통과 (169.48ms, 12.3MB)
테스트 5 〉	통과 (165.62ms, 12.3MB)
테스트 6 〉	통과 (170.51ms, 12.3MB)
테스트 7 〉	통과 (180.92ms, 12.3MB)
테스트 8 〉	통과 (176.09ms, 14.9MB)
채점 결과
정확성: 61.2
효율성: 38.8
합계: 100.0 / 100.0


1번 문제와 비슷한 느낌이라 1번이 이해되니 2번은 나름 괜찮았음음
'''