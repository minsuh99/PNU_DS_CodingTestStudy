from collections import Counter

def solution(k, tangerine):
    answer = 0 # 서로 다른 종류가 최소이려면, 귤의 개수가 많은 종류부터 차례대로 담으면 됨
    
    my_list = sorted(dict(Counter(tangerine)).items(), key=lambda x:-x[1])
    # [1, 3, 2, 5, 4, 5, 2, 3] -> [(3, 2), (2, 2), (5, 2), (1, 1), (4, 1)]
    
    temp = 0 # 귤 개수 담기
    for num in my_list:
        temp += num[1] # 현재 귤 개수에 추가
        answer += 1 # 종류수 추가
        if temp >= k: # 귤 개수가 넘친다면?
            break # 최소 종류만큼 넣은 것
    return answer


'''
정확성  테스트
테스트 1 〉	통과 (6.59ms, 12.4MB)
테스트 2 〉	통과 (6.62ms, 12.4MB)
테스트 3 〉	통과 (6.91ms, 12.6MB)
테스트 4 〉	통과 (7.35ms, 12.2MB)
테스트 5 〉	통과 (8.19ms, 10.3MB)
테스트 6 〉	통과 (6.14ms, 10.4MB)
테스트 7 〉	통과 (7.07ms, 11.6MB)
테스트 8 〉	통과 (6.52ms, 11.1MB)
테스트 9 〉	통과 (6.11ms, 10.9MB)
테스트 10 〉	통과 (7.59ms, 12MB)
테스트 11 〉	통과 (0.03ms, 9.11MB)
테스트 12 〉	통과 (0.03ms, 9.2MB)
테스트 13 〉	통과 (0.03ms, 9.12MB)
테스트 14 〉	통과 (0.02ms, 9.36MB)
테스트 15 〉	통과 (0.04ms, 9.21MB)
테스트 16 〉	통과 (0.02ms, 9.3MB)
테스트 17 〉	통과 (0.03ms, 9.16MB)
테스트 18 〉	통과 (0.02ms, 9.21MB)
테스트 19 〉	통과 (0.02ms, 9.27MB)
테스트 20 〉	통과 (0.02ms, 9.3MB)
테스트 21 〉	통과 (0.09ms, 9.23MB)
테스트 22 〉	통과 (0.28ms, 9.36MB)
테스트 23 〉	통과 (0.31ms, 9.41MB)
테스트 24 〉	통과 (0.37ms, 9.52MB)
테스트 25 〉	통과 (3.60ms, 10.4MB)
테스트 26 〉	통과 (6.83ms, 11.6MB)
테스트 27 〉	통과 (48.60ms, 25.5MB)
테스트 28 〉	통과 (27.86ms, 17.6MB)
테스트 29 〉	통과 (56.39ms, 20.4MB)
테스트 30 〉	통과 (49.89ms, 25.7MB)
테스트 31 〉	통과 (8.08ms, 11.6MB)
테스트 32 〉	통과 (7.74ms, 13MB)
테스트 33 〉	통과 (35.44ms, 21.5MB)
테스트 34 〉	통과 (31.90ms, 20.5MB)
채점 결과
정확성: 100.0
합계: 100.0 / 100.0
'''